//
// Project:				eXtremeServer Sauerbraten
// File Name: 			eXtreme_Library.cfg
// Author: 				BudSpencer
// Date: 				2017
// 
// Purpose: 			define functions to help server and command interpreter system
// Note: 				it's not recommended to delete or change anything in that file unless you want errros
//



// ADDTOLIST 
// ADD ELEMENTS TO A LIST 
// IT'LL BE ESCAPED LIKE IN AN ARRAY 
eXtreme_AddToList = [
	listadd_list = $arg1 ; listadd_y = $arg2 ; listadd_pos = -1 
	listadd_res = [-1] ; listadd_templist = [-1]
	listadd_res = [] ; listadd_templist = []
	loop i ( listlen $listadd_list ) [
		// format list as array first
		cond ( = ( listlen $listadd_templist ) 0 ) [
			listadd_templist = ( concatword $listadd_templist ( escape ( at $listadd_list $i ) ) )
		] [
			listadd_templist = ( concat $listadd_templist ( escape ( at $listadd_list $i ) ) )
		]
	]
	cond ( = ( listlen $listadd_templist ) 0 ) [
		listadd_templist = ( concatword $listadd_templist ( escape $listadd_y ) )
	] [
		listadd_templist = ( concat $listadd_templist ( escape $listadd_y ) )
	]
	listadd_res = $listadd_templist
	result $listadd_res
]


// DELETEFROMLIST 
// DELETE A SPECIFIED INDEX FROM LIST
eXtreme_DeleteFromList = [
	listdel_list = $arg1 ; listdel_index = $arg2 ; listdel_newlist = [-1]
	cond ( && ( !=s ( format $listdel_list ) "" ) ( !=s ( format $listdel_index ) "" ) ) [
		listdel_newlist = []
		loop i ( listlen $listdel_list ) [
			cond ( != $i $listdel_index ) [
				cond ( = ( listlen $listdel_newlist ) 0 ) [
					listdel_newlist = ( concatword $listdel_newlist ( escape ( at $listdel_list $i ) ) )
				] [
					listdel_newlist = ( concat $listdel_newlist ( escape ( at $listdel_list $i ) ) )
				]
			]
		]
	]
	result $listdel_newlist
]
					
		
// CHECKFORARGUMENTS
// CHECKS IF ALL REQUIRED ARGUMENTS WERE GIVEN CORRECTLY
// RETURNS 1 IF ALL ARGUMENTS WERE GIVEN, RETURNS 0 IF ANYTHING IS = NULL OR UNSET
eXtreme_CheckForArguments = [ 
	check_res = 1
	loopwhile i $numargs [ = $check_res 1 ] [
		cond ( =s ( format $[arg@( + $i 1 )] ) "" ) [
			check_res = 0
		]
	]
	result $check_res
]


// COMMANDEXISTS
// CHECKS IF A COMMAND NAME EXISTS IN COMMAND ARRAY
// RETURNS 1 IF YES, AND 0 IF NOT
eXtreme_CommandExists = [
	exists_cmd = $arg1 ; exists_res = 0
	cond ( !=s ( format $exists_cmd ) "" ) [
		looplist exists_curcmd $COMMAND_NAMES [
			cond ( =s $exists_curcmd $exists_cmd ) [
				exists_res = 1
			]
		]
	]
	result $exists_res
]


// PARAMETERTYPE
// GET PARAMETER TYPE OF SINGLE CHAR
// RETURNS DATATYPE OR "Unknown" IF UNKNOWN
eXtreme_ParameterType = [
	param_type = ( format $arg1 )
	param_res = "Unknown"
	cond ( !=s $param_type "" ) [
		cases $param_type "i" [
			param_res = "Integer"
		] "f" [
			param_res = "Float"
		] "w" [
			param_res = "Word" 
		] "s" [
			param_res = "String" 
		]
	]
	result ( format $param_res )
]


// GETDATATYPE
// RETURNS DATATYPE IN WORD OF ENTERED VALUE
// RETURNS "Unknown" IF UNKNOWN OR EMPTY PARAMETER
eXtreme_getDataType = [
	data_type = ( format $arg1 )
	data_res = "Nothing" // return this, if nothing were entered
	cond ( !=s $data_type "" ) [
		data_res = ""
		cond ( ! ( eXtreme_isInteger $data_type ) ) [
			cond ( ! ( eXtreme_isFloat $data_type ) ) [
				cond ( ! ( eXtreme_isWord $data_type ) ) [
					cond ( ! ( eXtreme_isString $data_type ) ) [
						data_res = "Unknown"
					] [
						data_res = "String" 
					]
				] [
					data_res = "Word"
				]
			] [
				data_res = "Float"
			]
		] [
			data_res = "Integer"
		]
	]
	result $data_res
]


// GETARGUMENTPOSITION
// RETURNS ARGUMENT POSITION IN STRING 
eXtreme_getParameterPosition = [
	pos_arg = ( format $arg1 ) ; pos_list = ( format $arg2 )
	pos_curchar = "" ; pos_args = "" ; pos_count = 0 ; pos_len = 0
	cond ( && ( !=s $pos_arg "" ) ( !=s $pos_list "" ) ) [
		while [ > $pos_arg $pos_count ] [
			pos_count = ( + $pos_count 1 )
			cond ( = ( listlen $pos_args ) 0 ) [
				pos_args = ( concatword $pos_args ( unescape ( at $pos_list $pos_count ) ) )
			] [
				pos_args = ( concat $pos_args ( unescape ( at $pos_list $pos_count ) ) )
			]
		]
		cond ( || ( eXtreme_isInteger ( at $pos_list $pos_arg ) ) ( eXtreme_isFloat ( at $pos_list $pos_arg ) ) ) [
			pos_len = ( + ( - ( strlen $pos_args ) ( - ( strlen ( at $pos_list $pos_arg ) ) 1 ) ) 4 )
		] [
			pos_len = ( + ( - ( strlen $pos_args ) ( - ( strlen ( at $pos_list $pos_arg ) ) 1 ) ) 2 )
		]
	]
	result $pos_len
]
	
	
	
// FORMATUNDERLINE 
// RETURN FORMATTED UNDERLINE FOR ERRORS
eXtreme_FormatUnderline = [
	under_arg = $arg1 ; under_len = $arg2 
	under_arglist = $arg3
	under_finalunderline = ""
	cond ( && ( !=s $under_arg "" ) ( !=s $under_len "" ) ( !=s $under_arglist "" ) ) [
		under_finalunderline = "^^" 
		loop i ( - ( strlen ( at $under_arglist $under_arg ) ) 1 ) [
			under_finalunderline = ( concatword $under_finalunderline "~" )
		]
		loop i ( + ( + ( eXtreme_getParameterPosition $under_arg $under_arglist ) ( strlen "Input Help:" ) ) ( + ( strlen ( at $under_arglist 0 ) ) 1 ) ) [
			under_finalunderline = ( concatword " " $under_finalunderline )
		]
	]
	result ( format $under_finalunderline )
]


// FORMATERRORTEXT
// RETURNS FORMATTED INPUT
// (ERRORS WILL BE COLORED BLUE)
// COMMAND WILL RETURN "-1" IF SOMETHING'S NOT GIVEN
eXtreme_FormatErrortext = [
	errtxt_text = ( format $arg1 )
	errtxt_arg = ( format $arg2 )
	errtxt_res = "-1"
	cond ( && ( !=s $errtxt_arg "" ) ( !=s $errtxt_text "" ) ) [	
		errtxt_res = ""
		loop i ( listlen $errtxt_text ) [
			cond ( =s $errtxt_arg ( at $errtxt_text $i ) ) [
				cond ( = ( listlen $errtxt_res ) 0 ) [
					errtxt_res = ( concatword $errtxt_res ( concatword "^f1" ( at $errtxt_text $i ) ) )
				] [
					errtxt_res = ( concat $errtxt_res ( concatword "^f1" ( at $errtxt_text $i ) ) )
				]
			] [
				cond ( = ( listlen $errtxt_res ) 0 ) [
					errtxt_res = ( concatword $errtxt_res ( concatword "^f7" ( at $errtxt_text $i ) ) )
				] [
					errtxt_res = ( concat $errtxt_res ( concatword "^f7" ( at $errtxt_text $i ) ) )
				]
			]
		]
	]
	result ( format $errtxt_res )
]
		




